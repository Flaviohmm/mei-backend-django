# Generated by Django 5.2.2 on 2025-06-17 20:24

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('client_type', models.CharField(choices=[('pf', 'Pessoa Física'), ('pj', 'Pessoa Jurídica')], max_length=2, verbose_name='Tipo de Cliente')),
                ('document', models.CharField(max_length=18, validators=[django.core.validators.RegexValidator(message='CPF deve ter formato XXX.XXX.XXX-XX ou CNPJ XX.XXX.XXX/XXXX-XX', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$|\\d{11}|\\d{14}')], verbose_name='CPF/CNPJ')),
                ('name', models.CharField(max_length=200, verbose_name='Nome/Razão Social')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Telefone deve ter formato (XX) XXXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='Telefone')),
                ('address', models.CharField(max_length=200, verbose_name='Endereço')),
                ('neighborhood', models.CharField(max_length=100, verbose_name='Bairro')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='Estado')),
                ('zip_code', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='CEP deve ter formato XXXXX-XXX', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('service_description', models.TextField(verbose_name='Descrição do Serviço')),
                ('service_type', models.CharField(choices=[('dev', 'Desenvolvimento de Software'), ('design', 'Design Gráfico'), ('consulting', 'Consultoria')], max_length=20, verbose_name='Tipo de Serviço')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor')),
                ('tax', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Imposto (%)')),
                ('additional_info', models.TextField(blank=True, null=True, verbose_name='Informações Adicionais')),
                ('payment_method', models.CharField(choices=[('pix', 'PIX'), ('credit', 'Cartão de Crédito'), ('transfer', 'Transferência Bancária'), ('cash', 'Dinheiro')], max_length=10, verbose_name='Forma de Pagamento')),
                ('due_date', models.DateField(verbose_name='Data de Vencimento')),
                ('issue_date', models.DateField(verbose_name='Data de Emissão')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Nota Fiscal',
                'verbose_name_plural': 'Notas Fiscais',
                'db_table': 'invoices',
                'ordering': ['-created_at'],
            },
        ),
    ]
